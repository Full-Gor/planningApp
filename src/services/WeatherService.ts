import { WeatherInfo } from '../types/Event';

const WEATHER_API_KEY = 'your-weather-api-key'; // Remplacez par votre cl√© API

export class WeatherService {
  static async getWeatherForLocation(
    latitude: number,
    longitude: number,
    date: Date
  ): Promise<WeatherInfo | null> {
    try {
      // Utilisation d'une API m√©t√©o comme OpenWeatherMap
      const response = await fetch(
        `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric&lang=fr`
      );
      
      if (!response.ok) {
        throw new Error('Erreur lors de la r√©cup√©ration des donn√©es m√©t√©o');
      }
      
      const data = await response.json();
      
      return {
        temperature: Math.round(data.main.temp),
        condition: data.weather[0].description,
        icon: data.weather[0].icon,
        humidity: data.main.humidity,
        windSpeed: data.wind.speed,
      };
    } catch (error) {
      console.error('Erreur m√©t√©o:', error);
      return null;
    }
  }

  static async getWeatherForecast(
    latitude: number,
    longitude: number,
    days: number = 5
  ): Promise<WeatherInfo[]> {
    try {
      const response = await fetch(
        `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric&lang=fr&cnt=${days * 8}`
      );
      
      if (!response.ok) {
        throw new Error('Erreur lors de la r√©cup√©ration des pr√©visions m√©t√©o');
      }
      
      const data = await response.json();
      
      return data.list.map((item: any) => ({
        temperature: Math.round(item.main.temp),
        condition: item.weather[0].description,
        icon: item.weather[0].icon,
        humidity: item.main.humidity,
        windSpeed: item.wind.speed,
      }));
    } catch (error) {
      console.error('Erreur pr√©visions m√©t√©o:', error);
      return [];
    }
  }

  static getWeatherIcon(iconCode: string): string {
    const iconMap: { [key: string]: string } = {
      '01d': '‚òÄÔ∏è', '01n': 'üåô',
      '02d': '‚õÖ', '02n': '‚òÅÔ∏è',
      '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',
      '04d': '‚òÅÔ∏è', '04n': '‚òÅÔ∏è',
      '09d': 'üåßÔ∏è', '09n': 'üåßÔ∏è',
      '10d': 'üå¶Ô∏è', '10n': 'üåßÔ∏è',
      '11d': '‚õàÔ∏è', '11n': '‚õàÔ∏è',
      '13d': '‚ùÑÔ∏è', '13n': '‚ùÑÔ∏è',
      '50d': 'üå´Ô∏è', '50n': 'üå´Ô∏è',
    };
    
    return iconMap[iconCode] || 'üå§Ô∏è';
  }

  static shouldShowWeatherWarning(weather: WeatherInfo, isOutdoorEvent: boolean): boolean {
    if (!isOutdoorEvent) return false;
    
    const warningConditions = [
      'rain', 'snow', 'storm', 'thunderstorm', 'heavy',
      'pluie', 'neige', 'orage', 'temp√™te', 'forte'
    ];
    
    return warningConditions.some(condition => 
      weather.condition.toLowerCase().includes(condition)
    ) || weather.temperature < 0 || weather.temperature > 35;
  }
}